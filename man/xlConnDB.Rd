% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xlConnDB.R
\name{xlConnPostgres}
\alias{xlConnPostgres}
\alias{xlConnSQLServ}
\title{Database connection commands}
\usage{
xlConnPostgres(u, pw, db, server, port, ...)

xlConnSQLServ(u = NULL, pw = NULL, db, server, instance, trusted = T, ...)
}
\arguments{
\item{u}{Username of the database credentials.}

\item{pw}{Password of the database credentials.}

\item{db}{The name of the database.}

\item{server}{The server name or host name (in the case of AWS RedShift).}

\item{port}{The port for the database.}

\item{...}{Any additional arguments passed to respective function.}

\item{instance}{The instance of the connection, suitable for a SQL Server.}

\item{trusted}{Logical input, instructing the connection to use the operating
system's credientials if \code{TRUE}, in which case no value is needed
for either \code{u} or \code{pw}.}
}
\value{
\code{xlConnPostgres} returns a postgres source object \code{src} from
  \code{\link{src_postgres}}, to be used in table references like this one:
  \code{tbl(src, sql('<sql_query>'))}.
  \code{xlConnSQLServ} passes arguments to \code{\link{odbcDriverConnect}},
  which returns the \code{RODBC} object \code{conn} to be used in a function such as
  \code{sqlQuery(cnn, '<sql_query>')}.
}
\description{
These functions standardlise various database connection methods
and use a fairly uniform way to create connection objects which
can then be used in subsequent SQL queries.
}
\examples{
\dontrun{
src <- xlConnPostgres(u, pw, db, server, port)
sample_table <- tbl(src, sql('select top 100 * from table1'))
}


\dontrun{
conn <- xlConnSQLServ(db, server, instance)
sqlQuery(conn, 'select * from information_schema.tables')
}
}
